warning: adding items after statements is confusing, since items exist from the start of the scope
   --> src/chat/client.rs:172:9
    |
172 | /         struct Memory {
173 | |             ack: bool,
174 | |             welcome: bool,
175 | |             yourhost: bool,
...   |
181 | |             globaluserstate: bool,
182 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements
    = note: `-W clippy::items-after-statements` implied by `-W clippy::pedantic`

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> src/chat/client.rs:238:9
    |
238 | /         struct Memory {
239 | |             join: bool,
240 | |             namreply: bool,
241 | |             endofnames: bool,
242 | |             userstate: bool,
243 | |             roomstate: bool,
244 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: binding's name is too similar to existing binding
  --> src/main.rs:77:17
   |
77 |             let auth = auth::oauth::OAuthServer::start_auth(auth::OAuthServerData {
   |                 ^^^^
   |
note: existing binding defined here
  --> src/main.rs:70:5
   |
70 |     oauth: Option<String>,
   |     ^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names
   = note: `-W clippy::similar-names` implied by `-W clippy::pedantic`

warning: unused variable: `params`
   --> src/chat/client.rs:114:44
    |
114 |                 Command::Raw(ref comm, ref params) => {
    |                                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_params`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: field `expires_in` is never read
  --> src/auth/access.rs:21:5
   |
18 | struct TokenRequestResponse {
   |        -------------------- field in this struct
...
21 |     expires_in: u64,
   |     ^^^^^^^^^^
   |
   = note: `TokenRequestResponse` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `expires_in` is never read
  --> src/auth/access.rs:27:5
   |
25 | struct TokenValidationResponse {
   |        ----------------------- field in this struct
26 |     client_id: String,
27 |     expires_in: u64,
   |     ^^^^^^^^^^
   |
   = note: `TokenValidationResponse` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: associated function `tags_to_map` is never used
   --> src/chat/client.rs:288:8
    |
288 |     fn tags_to_map(tags: Vec<Tag>) -> HashMap<String, Option<String>> {
    |        ^^^^^^^^^^^

warning: associated function `is_chat_clear` is never used
  --> src/chat/tag.rs:75:12
   |
75 |     pub fn is_chat_clear(&self) -> bool {
   |            ^^^^^^^^^^^^^

warning: associated function `is_timeout` is never used
  --> src/chat/tag.rs:78:12
   |
78 |     pub fn is_timeout(&self) -> bool {
   |            ^^^^^^^^^^

warning: associated function `is_ban` is never used
  --> src/chat/tag.rs:81:12
   |
81 |     pub fn is_ban(&self) -> bool {
   |            ^^^^^^

warning: item name starts with its containing module's name
  --> src/auth/access.rs:10:1
   |
10 | / pub struct AccessTokenManager {
11 | |     creds: Arc<RwLock<Credentials>>,
12 | |     client_id: Arc<String>,
13 | |     client_secret: Arc<String>,
14 | |     token_store: PathBuf,
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions
   = note: `-W clippy::module-name-repetitions` implied by `-W clippy::pedantic`

warning: docs for function returning `Result` missing `# Errors` section
  --> src/auth/access.rs:31:5
   |
31 |     pub async fn new_oauth(data: AccessTokenManagerOAuth) -> Result<Self, AccessTokenManagerError> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc
   = note: `-W clippy::missing-errors-doc` implied by `-W clippy::pedantic`

warning: docs for function returning `Result` missing `# Errors` section
  --> src/auth/access.rs:70:5
   |
70 | /     pub async fn new_tokens(
71 | |         data: AccessTokenManagerTokens,
72 | |     ) -> Result<Self, AccessTokenManagerError> {
   | |______________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/auth/access.rs:105:5
    |
105 |     pub async fn validate(&self) -> Result<bool, AccessTokenManagerError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/auth/access.rs:110:37
    |
110 |                 format!("OAuth {}", self.creds.read().unwrap().access_token),
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc
    = note: `-W clippy::missing-panics-doc` implied by `-W clippy::pedantic`

warning: docs for function returning `Result` missing `# Errors` section
   --> src/auth/access.rs:105:5
    |
105 |     pub async fn validate(&self) -> Result<bool, AccessTokenManagerError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/auth/access.rs:139:5
    |
139 |     pub async fn refresh(&self) -> Result<(), AccessTokenManagerError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/auth/access.rs:145:25
    |
145 |                         self.creds.read().unwrap().refresh_token,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> src/auth/access.rs:139:5
    |
139 |     pub async fn refresh(&self) -> Result<(), AccessTokenManagerError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/auth/access.rs:171:5
    |
171 |     pub fn read_credentials_unvalidated(&self) -> std::sync::RwLockReadGuard<'_, Credentials> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/auth/access.rs:172:9
    |
172 |         self.creds.read().unwrap()
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> src/auth/access.rs:174:5
    |
174 |     pub async fn get_credentials(&self) -> Result<Credentials, AccessTokenManagerError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this match arm has an identical body to another arm
   --> src/auth/access.rs:216:13
    |
216 |               AccessTokenManagerError::OnRequest(err) => f.write_fmt(format_args!(
    |               ^--------------------------------------
    |               |
    |  _____________help: try merging the arm patterns: `AccessTokenManagerError::OnRequest(err) | AccessTokenManagerError::OnRefresh(err)`
    | |
217 | |                 "Error {} requesting an Access Token from Twitch: {}",
218 | |                 err.status, err.message
219 | |             )),
    | |______________^
    |
    = help: or try changing either arm body
note: other arm here
   --> src/auth/access.rs:224:13
    |
224 | /             AccessTokenManagerError::OnRefresh(err) => f.write_fmt(format_args!(
225 | |                 "Error {} requesting an Access Token from Twitch: {}",
226 | |                 err.status, err.message
227 | |             )),
    | |______________^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
    = note: `-W clippy::match-same-arms` implied by `-W clippy::pedantic`

warning: item name ends with its containing module's name
  --> src/auth/error.rs:4:1
   |
4  | / pub enum OAuthServerError {
5  | |     OnServerCreate(Box<dyn std::error::Error + Send + Sync>),
6  | |     OnReceive(std::io::Error),
7  | |     OnResponse(std::io::Error),
...  |
12 | |     Ring(ring::error::Unspecified),
13 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name ends with its containing module's name
  --> src/auth/error.rs:16:1
   |
16 | / pub enum AccessTokenManagerError {
17 | |     Net(reqwest::Error),
18 | |     BadData(serde_json::Error),
19 | |     OnRequest(TwitchError),
...  |
24 | |     IO(std::io::Error),
25 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name ends with its containing module's name
  --> src/auth/error.rs:28:1
   |
28 | / pub struct TwitchError {
29 | |     pub error: Option<String>,
30 | |     pub status: u16,
31 | |     pub message: String,
32 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this method could have a `#[must_use]` attribute
  --> src/auth/oauth.rs:17:5
   |
17 |     pub fn start_auth(options: OAuthServerData) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn start_auth(options: OAuthServerData) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
   = note: `-W clippy::must-use-candidate` implied by `-W clippy::pedantic`

warning: this method could have a `#[must_use]` attribute
  --> src/auth/oauth.rs:21:5
   |
21 |     pub fn into_inner(self) -> JoinHandle<ClientResult> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn into_inner(self) -> JoinHandle<ClientResult>`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unused `async` for function with no await statements
   --> src/auth/oauth.rs:25:5
    |
25  | /     async fn host_auth(options: OAuthServerData) -> ClientResult {
26  | |         let server = tiny_http::Server::http(&options.host_address)
27  | |             .map_err(OAuthServerError::OnServerCreate)?;
28  | |         let rand = ring::rand::SystemRandom::new();
...   |
113 | |         }
114 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async
    = note: `-W clippy::unused-async` implied by `-W clippy::pedantic`

warning: consider adding a `;` to the last statement for consistent formatting
   --> src/auth/oauth.rs:37:13
    |
37  | /             match request.url() {
38  | |                 "/" => {
39  | |                     let (url, new_state) = OAuthServer::oauth_redirect_link(
40  | |                         &options.client_id,
...   |
111 | |             }
112 | |             .map_err(OAuthServerError::OnResponse)?
    | |___________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned
    = note: `-W clippy::semicolon-if-nothing-returned` implied by `-W clippy::pedantic`
help: add a `;` here
    |
37  ~             match request.url() {
38  +                 "/" => {
39  +                     let (url, new_state) = OAuthServer::oauth_redirect_link(
40  +                         &options.client_id,
41  +                         &format!("http://{}{}", options.host_address, options.response_path),
42  +                         &options.scopes,
43  +                         &rand,
44  +                     )
45  +                     .map_err(OAuthServerError::Ring)?;
46  + 
47  +                     current_state = Some(new_state);
48  + 
49  +                     request.respond(Response::new(
50  +                         StatusCode(308),
51  +                         vec![tiny_http::Header::from_bytes("Location".as_bytes(), url).unwrap()],
52  +                         "Redirecting...".as_bytes(),
53  +                         None,
54  +                         None,
55  +                     ))
56  +                 }
57  +                 response if response.starts_with(&options.response_path) => {
58  +                     let (_, response) = response.split_once('?').unwrap();
59  +                     let Some(params) = OAuthServer::parse_url_params(response) else {
60  +                         request.respond(OAuthServer::code(400, "Invalid response.")).map_err(OAuthServerError::OnResponse)?;
61  +                         continue;
62  +                     };
63  + 
64  +                     if let (Some(error), Some(error_description)) = (params.get("error"), params.get("error_description")) {
65  +                         request.respond(OAuthServer::code(500, "Twitch error.")).map_err(OAuthServerError::OnResponse)?;
66  +                         return Err(OAuthServerError::OnAuth { error: error.clone(), error_description: error_description.replace('+', " ") });
67  +                     }
68  + 
69  +                     let (Some(code), Some(state)) = (params.get("code"), params.get("state")) else {
70  +                         request.respond(OAuthServer::code(400, "Invalid response.")).map_err(OAuthServerError::OnResponse)?;
71  +                         continue;
72  +                     };
73  +                     let Some(current_state) = &current_state else {
74  +                         request.respond(OAuthServer::code(403, "Invalid state.")).map_err(OAuthServerError::OnResponse)?;
75  +                         continue;
76  +                     };
77  +                     if current_state != state {
78  +                         request.respond(OAuthServer::code(403, "Invalid state.")).map_err(OAuthServerError::OnResponse)?;
79  +                         continue;
80  +                     }
81  + 
82  +                     request.respond(OAuthServer::code(200, "Success!")).map_err(OAuthServerError::OnResponse)?;
83  +                     return Ok(OAuthToken(String::from(code)));
84  +                 }
85  +                 error if error.starts_with("/?error") => {
86  +                     let Some(params) = OAuthServer::parse_url_params(&error[2..]) else {
87  +                         request.respond(OAuthServer::code(400, "Invalid response.")).map_err(OAuthServerError::OnResponse)?;
88  +                         continue;
89  +                     };
90  + 
91  +                     let (Some(error), Some(error_description), Some(state)) = (params.get("error"), params.get("error_description"), params.get("state")) else {
92  +                         request.respond(OAuthServer::code(400, "Invalid response.")).map_err(OAuthServerError::OnResponse)?;
93  +                         continue;
94  +                     };
95  +                     let Some(current_state) = &current_state else {
96  +                         request.respond(OAuthServer::code(403, "Invalid state.")).map_err(OAuthServerError::OnResponse)?;
97  +                         continue;
98  +                     };
99  +                     if current_state != state {
100 +                         request.respond(OAuthServer::code(403, "Invalid state.")).map_err(OAuthServerError::OnResponse)?;
101 +                         continue;
102 +                     }
103 + 
104 +                     request.respond(OAuthServer::code(500, "Twitch error.")).map_err(OAuthServerError::OnResponse)?;
105 +                     return Err(OAuthServerError::OnAuth {
106 +                         error: String::from(error),
107 +                         error_description: error_description.replace('+', " "),
108 +                     });
109 +                 }
110 +                 _ => request.respond(OAuthServer::code(404, "Not found.")),
111 +             }
112 +             .map_err(OAuthServerError::OnResponse)?;
    |

warning: item name ends with its containing module's name
  --> src/chat/client.rs:14:1
   |
14 | / pub struct ChatClient {
15 | |     client: Arc<Client>,
16 | |     stream: irc::client::ClientStream,
17 | |     data: super::data::ChatClientData,
18 | |     joined_users: HashSet<String>,
19 | |     interface: super::interface::ChatInterface,
20 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: docs for function returning `Result` missing `# Errors` section
  --> src/chat/client.rs:23:5
   |
23 |     pub async fn new(data: super::data::ChatClientData) -> Result<Self, ChatClientError> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> src/chat/client.rs:57:5
   |
57 |     pub async fn run(self) -> Result<(), ChatClientError> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this could be rewritten as `let...else`
   --> src/chat/client.rs:97:21
    |
97  | /                     let username = match username {
98  | |                         irc::proto::Prefix::Nickname(_, username, _) => username,
99  | |                         _ => unreachable!("The JOIN prefix is always Prefix::Nickname"),
100 | |                     };
    | |______________________^ help: consider writing: `let irc::proto::Prefix::Nickname(_, username, _) = username else { unreachable!("The JOIN prefix is always Prefix::Nickname") };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
    = note: `-W clippy::manual-let-else` implied by `-W clippy::pedantic`

warning: wildcard matches only a single variant and will also match any future added variants
  --> src/chat/client.rs:99:25
   |
99 |                         _ => unreachable!("The JOIN prefix is always Prefix::Nickname"),
   |                         ^ help: try this: `irc::proto::Prefix::ServerName(_)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_wildcard_for_single_variants
   = note: `-W clippy::match-wildcard-for-single-variants` implied by `-W clippy::pedantic`

warning: this could be rewritten as `let...else`
   --> src/chat/client.rs:107:21
    |
107 | /                     let username = match username {
108 | |                         irc::proto::Prefix::Nickname(_, username, _) => username,
109 | |                         _ => unreachable!("The PART prefix is always Prefix::Nickname"),
110 | |                     };
    | |______________________^ help: consider writing: `let irc::proto::Prefix::Nickname(_, username, _) = username else { unreachable!("The PART prefix is always Prefix::Nickname") };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: wildcard matches only a single variant and will also match any future added variants
   --> src/chat/client.rs:109:25
    |
109 |                         _ => unreachable!("The PART prefix is always Prefix::Nickname"),
    |                         ^ help: try this: `irc::proto::Prefix::ServerName(_)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_wildcard_for_single_variants

warning: more than 3 bools in a struct
   --> src/chat/client.rs:172:9
    |
172 | /         struct Memory {
173 | |             ack: bool,
174 | |             welcome: bool,
175 | |             yourhost: bool,
...   |
181 | |             globaluserstate: bool,
182 | |         }
    | |_________^
    |
    = help: consider using a state machine or refactoring bools into two-variant enums
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools
    = note: `-W clippy::struct-excessive-bools` implied by `-W clippy::pedantic`

warning: consider adding a `;` to the last statement for consistent formatting
   --> src/chat/client.rs:208:21
    |
208 |                     memory.globaluserstate = true
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add a `;` here: `memory.globaluserstate = true;`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned

warning: more than 3 bools in a struct
   --> src/chat/client.rs:238:9
    |
238 | /         struct Memory {
239 | |             join: bool,
240 | |             namreply: bool,
241 | |             endofnames: bool,
242 | |             userstate: bool,
243 | |             roomstate: bool,
244 | |         }
    | |_________^
    |
    = help: consider using a state machine or refactoring bools into two-variant enums
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools

warning: consider adding a `;` to the last statement for consistent formatting
   --> src/chat/client.rs:265:21
    |
265 |                     memory.userstate = true
    |                     ^^^^^^^^^^^^^^^^^^^^^^^ help: add a `;` here: `memory.userstate = true;`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned

warning: consider adding a `;` to the last statement for consistent formatting
   --> src/chat/client.rs:269:21
    |
269 |                     memory.roomstate = true
    |                     ^^^^^^^^^^^^^^^^^^^^^^^ help: add a `;` here: `memory.roomstate = true;`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned

warning: item name ends with its containing module's name
 --> src/chat/data.rs:4:1
  |
4 | / pub struct ChatClientData {
5 | |     pub access: AccessTokenManager,
6 | |     pub bot_username: String,
7 | |     pub chat_channel: String,
8 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this method could have a `#[must_use]` attribute
  --> src/chat/data.rs:22:5
   |
22 |     pub fn user_is_super(&self) -> bool {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn user_is_super(&self) -> bool`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: item name ends with its containing module's name
  --> src/chat/error.rs:2:1
   |
2  | / pub enum ChatClientError {
3  | |     Irc(irc::error::Error),
4  | |     Access(crate::auth::error::AccessTokenManagerError),
5  | |
...  |
14 | |     ChatUnrecognized(irc::proto::Message),
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name ends with its containing module's name
 --> src/chat/interface.rs:6:1
  |
6 | pub struct ChatInterface(pub(super) Arc<InterfaceData>);
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: calling `chat::data::ChatMessage::default()` is more clear than this expression
  --> src/chat/interface.rs:20:45
   |
20 |             message_channel: watch::channel(Default::default()).0,
   |                                             ^^^^^^^^^^^^^^^^^^ help: try: `chat::data::ChatMessage::default()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_trait_access
   = note: `-W clippy::default-trait-access` implied by `-W clippy::pedantic`

warning: consider adding a `;` to the last statement for consistent formatting
  --> src/chat/interface.rs:25:9
   |
25 | /         self.0
26 | |             .irc_client
27 | |             .send(irc::proto::Command::PRIVMSG(
28 | |                 format!("#{}", self.0.twitch_channel),
29 | |                 message.into(),
30 | |             ))
31 | |             .expect("TODO: handle ChatMessage.say() error")
   | |___________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned
help: add a `;` here
   |
25 ~         self.0
26 +             .irc_client
27 +             .send(irc::proto::Command::PRIVMSG(
28 +                 format!("#{}", self.0.twitch_channel),
29 +                 message.into(),
30 +             ))
31 +             .expect("TODO: handle ChatMessage.say() error");
   |

warning: consider adding a `;` to the last statement for consistent formatting
  --> src/chat/interface.rs:34:9
   |
34 | /         self.0
35 | |             .irc_client
36 | |             .send(irc::proto::Message {
37 | |                 tags: Some(vec![irc::proto::message::Tag(
...  |
46 | |             })
47 | |             .expect("TODO: handle ChatMessage.reply() error")
   | |_____________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned
help: add a `;` here
   |
34 ~         self.0
35 +             .irc_client
36 +             .send(irc::proto::Message {
37 +                 tags: Some(vec![irc::proto::message::Tag(
38 +                     String::from("reply-parent-msg-id"),
39 +                     Some(target.id.clone()),
40 +                 )]),
41 +                 prefix: None,
42 +                 command: irc::proto::Command::PRIVMSG(
43 +                     format!("#{}", self.0.twitch_channel),
44 +                     message.into(),
45 +                 ),
46 +             })
47 +             .expect("TODO: handle ChatMessage.reply() error");
   |

warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
  --> src/main.rs:32:25
   |
32 |       let token_manager = match token_manager {
   |  _________________________^
33 | |         Some(manager) => manager,
34 | |         None => {
35 | |             let oauth = run_oauth_server(args.oauth.clone(), args.clientid.clone()).await?;
...  |
44 | |         }
45 | |     };
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
   = note: `-W clippy::single-match-else` implied by `-W clippy::pedantic`
help: try this
   |
32 ~     let token_manager = if let Some(manager) = token_manager { manager } else {
33 +         let oauth = run_oauth_server(args.oauth.clone(), args.clientid.clone()).await?;
34 +         auth::access::AccessTokenManager::new_oauth(auth::AccessTokenManagerOAuth {
35 +             oauth,
36 +             client_id: args.clientid.clone(),
37 +             client_secret: args.clientsecret.clone(),
38 +             redirect_url: String::from("http://localhost:3000"),
39 +             tokens_store_path,
40 +         })
41 +         .await?
42 ~     };
   |

warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
  --> src/main.rs:73:5
   |
73 | /     match oauth {
74 | |         Some(oauth) => Ok(OAuthToken(oauth)),
75 | |         None => {
76 | |             println!("No OAuth provided. Starting server at http:://localhost:3000 ...");
...  |
90 | |         }
91 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try this
   |
73 ~     if let Some(oauth) = oauth { Ok(OAuthToken(oauth)) } else {
74 +         println!("No OAuth provided. Starting server at http:://localhost:3000 ...");
75 +         let auth = auth::oauth::OAuthServer::start_auth(auth::OAuthServerData {
76 +             client_id,
77 +             scopes: ["chat:read", "chat:edit"]
78 +                 .into_iter()
79 +                 .map(String::from)
80 +                 .collect(),
81 +             host_address: String::from("localhost:3000"),
82 +             response_path: String::from("/response"),
83 +         });
84 + 
85 +         let oauth = auth.into_inner().await.unwrap()?;
86 +         println!("Success! Server closed.");
87 +         Ok(oauth)
88 +     }
   |

warning: `eyebot` (bin "eyebot") generated 48 warnings
    Finished dev [unoptimized + debuginfo] target(s) in 0.17s
